=begin
#Wheel Fitment API

#The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.

OpenAPI spec version: v1
Contact: info@wheel-size.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module WsApiClient
  class ModelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of models by manufacturer
    # Get a list of models that match given manufacturer and year (if present)
    # @param make Manufacturer slug name, use _**&#x60;GET /makes/&#x60;**_ to get possible values (e.g. &#x60;mitsubishi&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year You can use _**&#x60;GET /years/&#x60;**_ to get possible years (e.g. &#x60;2015&#x60;)
    # @option opts [String] :lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only
    # @return [Array<Model>]
    def models_list(make, opts = {})
      data, _status_code, _headers = models_list_with_http_info(make, opts)
      data
    end

    # Returns a list of models by manufacturer
    # Get a list of models that match given manufacturer and year (if present)
    # @param make Manufacturer slug name, use _**&#x60;GET /makes/&#x60;**_ to get possible values (e.g. &#x60;mitsubishi&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year You can use _**&#x60;GET /years/&#x60;**_ to get possible years (e.g. &#x60;2015&#x60;)
    # @option opts [String] :lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only
    # @return [Array<(Array<Model>, Fixnum, Hash)>] Array<Model> data, response status code and response headers
    def models_list_with_http_info(make, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.models_list ...'
      end
      # verify the required parameter 'make' is set
      if @api_client.config.client_side_validation && make.nil?
        fail ArgumentError, "Missing the required parameter 'make' when calling ModelsApi.models_list"
      end
      # resource path
      local_var_path = '/models/'

      # query parameters
      query_params = {}
      query_params[:'make'] = make
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'lang'] = opts[:'lang'] if !opts[:'lang'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['user_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Model>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#models_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get more info about model
    # Get the detailed information about model series
    # @param make Manufacturer slug name, use _**&#x60;GET /makes/&#x60;**_ to get possible values (e.g. &#x60;mitsubishi&#x60;)
    # @param slug Model slug name, use _**&#x60;GET /models/&#x60;**_ to get possible values (e.g. &#x60;outlander&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only
    # @return [ModelWithTires]
    def models_read(make, slug, opts = {})
      data, _status_code, _headers = models_read_with_http_info(make, slug, opts)
      data
    end

    # Get more info about model
    # Get the detailed information about model series
    # @param make Manufacturer slug name, use _**&#x60;GET /makes/&#x60;**_ to get possible values (e.g. &#x60;mitsubishi&#x60;)
    # @param slug Model slug name, use _**&#x60;GET /models/&#x60;**_ to get possible values (e.g. &#x60;outlander&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only
    # @return [Array<(ModelWithTires, Fixnum, Hash)>] ModelWithTires data, response status code and response headers
    def models_read_with_http_info(make, slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.models_read ...'
      end
      # verify the required parameter 'make' is set
      if @api_client.config.client_side_validation && make.nil?
        fail ArgumentError, "Missing the required parameter 'make' when calling ModelsApi.models_read"
      end
      # verify the required parameter 'slug' is set
      if @api_client.config.client_side_validation && slug.nil?
        fail ArgumentError, "Missing the required parameter 'slug' when calling ModelsApi.models_read"
      end
      # resource path
      local_var_path = '/models/{make}/{slug}/'.sub('{' + 'make' + '}', make.to_s).sub('{' + 'slug' + '}', slug.to_s)

      # query parameters
      query_params = {}
      query_params[:'lang'] = opts[:'lang'] if !opts[:'lang'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['user_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelWithTires')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#models_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get more info about model/year
    # 
    # @param make Manufacturer slug name, use _**&#x60;GET /makes/&#x60;**_ to get possible values (e.g. &#x60;mitsubishi&#x60;)
    # @param slug Model slug name, use _**&#x60;GET /models/&#x60;**_ to get possible values (e.g. &#x60;outlander&#x60;)
    # @param year You can use _**&#x60;GET /years/&#x60;**_ to get possible years (e.g. &#x60;2015&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only
    # @return [ModelWithTires]
    def models_read_year(make, slug, year, opts = {})
      data, _status_code, _headers = models_read_year_with_http_info(make, slug, year, opts)
      data
    end

    # Get more info about model/year
    # 
    # @param make Manufacturer slug name, use _**&#x60;GET /makes/&#x60;**_ to get possible values (e.g. &#x60;mitsubishi&#x60;)
    # @param slug Model slug name, use _**&#x60;GET /models/&#x60;**_ to get possible values (e.g. &#x60;outlander&#x60;)
    # @param year You can use _**&#x60;GET /years/&#x60;**_ to get possible years (e.g. &#x60;2015&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only
    # @return [Array<(ModelWithTires, Fixnum, Hash)>] ModelWithTires data, response status code and response headers
    def models_read_year_with_http_info(make, slug, year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.models_read_year ...'
      end
      # verify the required parameter 'make' is set
      if @api_client.config.client_side_validation && make.nil?
        fail ArgumentError, "Missing the required parameter 'make' when calling ModelsApi.models_read_year"
      end
      # verify the required parameter 'slug' is set
      if @api_client.config.client_side_validation && slug.nil?
        fail ArgumentError, "Missing the required parameter 'slug' when calling ModelsApi.models_read_year"
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling ModelsApi.models_read_year"
      end
      # resource path
      local_var_path = '/models/{make}/{slug}/{year}/'.sub('{' + 'make' + '}', make.to_s).sub('{' + 'slug' + '}', slug.to_s).sub('{' + 'year' + '}', year.to_s)

      # query parameters
      query_params = {}
      query_params[:'lang'] = opts[:'lang'] if !opts[:'lang'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['user_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelWithTires')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#models_read_year\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
