=begin
#Wheel Fitment API

#The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.

OpenAPI spec version: v1
Contact: info@wheel-size.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module WsApiClient
  class Trim
    # Combined trim, body, and generation identifier. Non-unique through markets (e.g. `20-gg2w-iii-restyling`)
    attr_accessor :slug

    # Format: __*`trim (body) [generation]`*__ (e.g. `2.0 (GG2W) [III Restyling]`)
    attr_accessor :name

    # Trim name. It can be empty for models created for JDM market (e.g. `2.0`, can be __*`null`*__)
    attr_accessor :trim

    # Body name. Used extensively for JDM market (e.g. `GG2W`, can be __*`null`*__)
    attr_accessor :body

    # Generation name (e.g. `III Restyling`, can be __*`null`*__)
    attr_accessor :generation

    # Trim production start year (e.g. `2015`, can be __*`null`*__)
    attr_accessor :production_start_year

    # Trim production end year (e.g. `2016`, can be __*`null`*__)
    attr_accessor :production_end_year

    # List of markets where this trim if present
    attr_accessor :markets

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'slug' => :'slug',
        :'name' => :'name',
        :'trim' => :'trim',
        :'body' => :'body',
        :'generation' => :'generation',
        :'production_start_year' => :'production_start_year',
        :'production_end_year' => :'production_end_year',
        :'markets' => :'markets'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'slug' => :'String',
        :'name' => :'String',
        :'trim' => :'String',
        :'body' => :'String',
        :'generation' => :'String',
        :'production_start_year' => :'Integer',
        :'production_end_year' => :'Integer',
        :'markets' => :'Array<Market>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'trim')
        self.trim = attributes[:'trim']
      end

      if attributes.has_key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.has_key?(:'generation')
        self.generation = attributes[:'generation']
      end

      if attributes.has_key?(:'production_start_year')
        self.production_start_year = attributes[:'production_start_year']
      end

      if attributes.has_key?(:'production_end_year')
        self.production_end_year = attributes[:'production_end_year']
      end

      if attributes.has_key?(:'markets')
        if (value = attributes[:'markets']).is_a?(Array)
          self.markets = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          slug == o.slug &&
          name == o.name &&
          trim == o.trim &&
          body == o.body &&
          generation == o.generation &&
          production_start_year == o.production_start_year &&
          production_end_year == o.production_end_year &&
          markets == o.markets
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [slug, name, trim, body, generation, production_start_year, production_end_year, markets].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = WsApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
