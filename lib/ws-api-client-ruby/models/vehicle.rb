=begin
#Wheel Fitment API

#The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.

OpenAPI spec version: v1
Contact: info@wheel-size.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module WsApiClient
  class Vehicle
    attr_accessor :market

    # Body name. Used extensively for JDM market (e.g. `GG2W`, can be __*`null`*__)
    attr_accessor :body

    # Trim name. It can be empty for models created for JDM market (e.g. `2.0`, can be __*`null`*__)
    attr_accessor :trim

    attr_accessor :generation

    # Number of stud holes (e.g. `5`, can be __*`null`*__)
    attr_accessor :stud_holes

    # Pitch circle diameter, mm (e.g. `105`, can be __*`null`*__)
    attr_accessor :pcd

    # Centre bore diameter, mm (e.g. `48.1`, can be __*`null`*__)
    attr_accessor :centre_bore

    attr_accessor :lock_type

    # Lock thread size (e.g. `M12 x 1.25`, can be __*`null`*__)
    attr_accessor :lock_text

    # Bolt pattern (e.g. `5x105`, can be __*`N/A`*__)
    attr_accessor :bolt_pattern

    attr_accessor :power

    # Fuel (e.g. `Petrol`, can be __*`null`*__)
    attr_accessor :fuel

    attr_accessor :wheels

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'market' => :'market',
        :'body' => :'body',
        :'trim' => :'trim',
        :'generation' => :'generation',
        :'stud_holes' => :'stud_holes',
        :'pcd' => :'pcd',
        :'centre_bore' => :'centre_bore',
        :'lock_type' => :'lock_type',
        :'lock_text' => :'lock_text',
        :'bolt_pattern' => :'bolt_pattern',
        :'power' => :'power',
        :'fuel' => :'fuel',
        :'wheels' => :'wheels'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'market' => :'Market',
        :'body' => :'String',
        :'trim' => :'String',
        :'generation' => :'Generation',
        :'stud_holes' => :'Integer',
        :'pcd' => :'Float',
        :'centre_bore' => :'Float',
        :'lock_type' => :'String',
        :'lock_text' => :'String',
        :'bolt_pattern' => :'String',
        :'power' => :'Power',
        :'fuel' => :'String',
        :'wheels' => :'Array<WheelPair>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'market')
        self.market = attributes[:'market']
      end

      if attributes.has_key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.has_key?(:'trim')
        self.trim = attributes[:'trim']
      end

      if attributes.has_key?(:'generation')
        self.generation = attributes[:'generation']
      end

      if attributes.has_key?(:'stud_holes')
        self.stud_holes = attributes[:'stud_holes']
      end

      if attributes.has_key?(:'pcd')
        self.pcd = attributes[:'pcd']
      end

      if attributes.has_key?(:'centre_bore')
        self.centre_bore = attributes[:'centre_bore']
      end

      if attributes.has_key?(:'lock_type')
        self.lock_type = attributes[:'lock_type']
      end

      if attributes.has_key?(:'lock_text')
        self.lock_text = attributes[:'lock_text']
      end

      if attributes.has_key?(:'bolt_pattern')
        self.bolt_pattern = attributes[:'bolt_pattern']
      end

      if attributes.has_key?(:'power')
        self.power = attributes[:'power']
      end

      if attributes.has_key?(:'fuel')
        self.fuel = attributes[:'fuel']
      end

      if attributes.has_key?(:'wheels')
        if (value = attributes[:'wheels']).is_a?(Array)
          self.wheels = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @market.nil?
        invalid_properties.push('invalid value for "market", market cannot be nil.')
      end

      if @body.nil?
        invalid_properties.push('invalid value for "body", body cannot be nil.')
      end

      if @trim.nil?
        invalid_properties.push('invalid value for "trim", trim cannot be nil.')
      end

      if @generation.nil?
        invalid_properties.push('invalid value for "generation", generation cannot be nil.')
      end

      if @stud_holes.nil?
        invalid_properties.push('invalid value for "stud_holes", stud_holes cannot be nil.')
      end

      if @pcd.nil?
        invalid_properties.push('invalid value for "pcd", pcd cannot be nil.')
      end

      if @centre_bore.nil?
        invalid_properties.push('invalid value for "centre_bore", centre_bore cannot be nil.')
      end

      if @lock_text.nil?
        invalid_properties.push('invalid value for "lock_text", lock_text cannot be nil.')
      end

      if @bolt_pattern.nil?
        invalid_properties.push('invalid value for "bolt_pattern", bolt_pattern cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @market.nil?
      return false if @body.nil?
      return false if @trim.nil?
      return false if @generation.nil?
      return false if @stud_holes.nil?
      return false if @pcd.nil?
      return false if @centre_bore.nil?
      lock_type_validator = EnumAttributeValidator.new('String', ['nut', 'bolt'])
      return false unless lock_type_validator.valid?(@lock_type)
      return false if @lock_text.nil?
      lock_text_validator = EnumAttributeValidator.new('String', ['M10 x 1.25', 'M12 x 1.25', 'M12 x 1.5', 'M12 x 1.75', 'M14 x 1.25', 'M14 x 1.5', 'M14 x 2.0', 'M16 x 1.5', '3/8\" - 24 UNF', '7/16\" - 20 UNF', '1/2\" - 20 UNF', '9/16\" - 18 UNF'])
      return false unless lock_text_validator.valid?(@lock_text)
      return false if @bolt_pattern.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lock_type Object to be assigned
    def lock_type=(lock_type)
      validator = EnumAttributeValidator.new('String', ['nut', 'bolt'])
      unless validator.valid?(lock_type)
        fail ArgumentError, 'invalid value for "lock_type", must be one of #{validator.allowable_values}.'
      end
      @lock_type = lock_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lock_text Object to be assigned
    def lock_text=(lock_text)
      validator = EnumAttributeValidator.new('String', ['M10 x 1.25', 'M12 x 1.25', 'M12 x 1.5', 'M12 x 1.75', 'M14 x 1.25', 'M14 x 1.5', 'M14 x 2.0', 'M16 x 1.5', '3/8\" - 24 UNF', '7/16\" - 20 UNF', '1/2\" - 20 UNF', '9/16\" - 18 UNF'])
      unless validator.valid?(lock_text)
        fail ArgumentError, 'invalid value for "lock_text", must be one of #{validator.allowable_values}.'
      end
      @lock_text = lock_text
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          market == o.market &&
          body == o.body &&
          trim == o.trim &&
          generation == o.generation &&
          stud_holes == o.stud_holes &&
          pcd == o.pcd &&
          centre_bore == o.centre_bore &&
          lock_type == o.lock_type &&
          lock_text == o.lock_text &&
          bolt_pattern == o.bolt_pattern &&
          power == o.power &&
          fuel == o.fuel &&
          wheels == o.wheels
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [market, body, trim, generation, stud_holes, pcd, centre_bore, lock_type, lock_text, bolt_pattern, power, fuel, wheels].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = WsApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
